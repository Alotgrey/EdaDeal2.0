openapi: 3.0.3
info:
  title: Econom - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
  
tags:
  - name: shops
      
  - name: products
      
  - name: categories
paths:
  /shops:
    get:
      tags:
        - shops
      summary: get all shops
      operationId: findAllShops
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Shop'          
        '400':
          description: Invalid status value
  /shops/{name}:
    get:
      tags:
        - shops
      summary: get certain shop
      operationId: getShopByName
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shop'          
        '400':
          description: Shop not found
  /products:
    get:
      tags:
        - products
      operationId: getAllProducts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'          
        '400':
          description: Invalid status value
  /products/{name}:
    get:
      tags:
        - products
      summary: get certain product
      operationId: findProductByName
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'          
        '400':
          description: Product not found
  /categories:
    get:
      tags:
       - categories
      operationId: getAllCategories
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Category'          
        '400':
          description: Invalid status value
  /categories/{name}:
    get:
      tags:
       - categories
      operationId: findCategoryByName
      parameters:
        - name: name
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '400':
          description: Category not found
components:
  schemas:
    Shop:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "Магнит"
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "Овощи"
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Лук"
        cost:
          type: string
          format: BigDecimal
          example: "130.00"
        image_url:
          type: string
        status:
          type: boolean
        shop:
          $ref: '#/components/schemas/Shop'
        category:
          $ref: '#/components/schemas/Category'
